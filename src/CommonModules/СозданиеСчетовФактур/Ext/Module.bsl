
&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(ДокументСчетФактура, Основание, ПеревыставлениеСФНалоговогоАгента = Ложь) экспорт

	Если Основание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РеквизитыОснования	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Дата, Организация, ВидОперации");
		Если РеквизитыОснования.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
			И НЕ УчетнаяПолитика.НачислятьНДСПоОтгрузке(РеквизитыОснования.Организация, РеквизитыОснования.Дата) Тогда
			
			ВызватьИсключение НСтр("ru = 'При отгрузке без перехода права собственности выписка счета-фактуры не требуется'");
			
		Иначе
			ВидДоговораСКонтрагентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание.ДоговорКонтрагента, "ВидДоговора");
			Если ВидДоговораСКонтрагентом = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ВызватьИсключение НСтр("ru = 'При передаче на комиссию выписка счета-фактуры не требуется'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСчетФактуруНаРеализацию(ДокументСчетФактура, Основание);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетФактуруНаРеализацию(ДокументСчетФактура, Основание)

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());

	СуществующийСФ = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание, Ложь, , СтруктураОтбора);
	Если ЗначениеЗаполнено(СуществующийСФ) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='На основании документа %1 был введен %2'"),
			Основание,
			СуществующийСФ);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	ДокументСчетФактура.Дата = Основание.Дата;
	ДокументСчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию;
	ДокументСчетФактура.ДокументыОснования.Добавить().ДокументОснование = Основание;

	ДокументСчетФактура.ПлатежноРасчетныеДокументы.Очистить();
	ДатыНомераПРД = Документы.СчетФактураВыданный.ДатыНомераПлатежноРасчетныхДокументов(
		ДокументСчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Для каждого СтрокаТаблицы Из ДатыНомераПРД Цикл
		НоваяСтрока = ДокументСчетФактура.ПлатежноРасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;

	ОпределениеПараметровСчетаФактурыНаРеализацию(ДокументСчетФактура);
	
КонецПроцедуры

&НаСервере
Процедура ОпределениеПараметровСчетаФактурыНаРеализацию(ДокументСчетФактура)
	
	Если ДокументСчетФактура.ДокументыОснования.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(ДокументСчетФактура.ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяПостановлениеНДС1137 = УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ДокументСчетФактура.Дата);
	ДатаДляФЗ56 = ?(ДокументСчетФактура.Исправление, ДокументСчетФактура.ДатаИсходногоДокумента, ДокументСчетФактура.Дата);
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДатаДляФЗ56); 
	
	Если ДокументСчетФактура.ДокументОснование <> ДокументСчетФактура.ДокументыОснования[0].ДокументОснование Тогда
		ДокументСчетФактура.ДокументОснование = ДокументСчетФактура.ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	ВидСчетаФактурыПоОснованию = УчетНДСПереопределяемый.ОпределитьВидСчетаФактурыВыданногоПоТипуОснования(ДокументСчетФактура.ДокументОснование);
	
	Если ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ВидСчетаФактурыПоОснованию = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		
		Перезаполнить = Ложь;
		Если НЕ ДокументСчетФактура.ВидСчетаФактуры = ВидСчетаФактурыПоОснованию Тогда
			ДокументСчетФактура.ВидСчетаФактуры = ВидСчетаФактурыПоОснованию;
			Перезаполнить   = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(ДокументСчетФактура);
	УстановитьПривилегированныйРежим(Ложь);
	
	СинхронизируемыеРеквизиты = "Организация,Контрагент,ДоговорКонтрагента,ВалютаДокумента"
		+ ",СуммаДокумента,СуммаУвеличение,СуммаУменьшение,Продавец,НомерСчетаФактурыПродавца,КПППродавца,ЕстьПрослеживаемыеТовары";
		
	Если ИспользуетсяПостановлениеНДС1137 Тогда
		
		СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
			+ ",СчетФактураБезНДС,СуммаНДСДокумента,СуммаНДСУвеличение,СуммаНДСУменьшение";
		
		Если ДокументСчетФактура.ДатаВыставления >= '20150101' Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты 
				+ ",СуммаДокументаКомиссия,СуммаУвеличениеКомиссия,СуммаУменьшениеКомиссия"
				+ ",СуммаНДСДокументаКомиссия,СуммаНДСУвеличениеКомиссия,СуммаНДСУменьшениеКомиссия";
		КонецЕсли;
		
		// Идентификатор государственного контракта заполняется автоматически только для КОРП версии.
		Если ВедетсяУчетНДСПоФЗ56 
			И ПолучитьФункциональнуюОпцию("ИспользуетсяГособоронзаказ") 
			И НЕ ЗначениеЗаполнено(ДокументСчетФактура.ИдентификаторГосКонтракта) Тогда
			СинхронизируемыеРеквизиты = СинхронизируемыеРеквизиты + ",ИдентификаторГосКонтракта";
		КонецЕсли;
		
	КонецЕсли;
	
	//СинхронизироватьРеквизитыОбъекта(ПараметрыСФ, СинхронизируемыеРеквизиты);
	
	Если ИспользуетсяПостановлениеНДС1137 И НЕ ЗначениеЗаполнено(ДокументСчетФактура.КодВидаОперации) Тогда
		Если ТипЗнч(ДокументСчетФактура.ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			КодВидаОперации = ПолучитьКодВидаОперации(ДокументСчетФактура);
		КонецЕсли;
	КонецЕсли;
	
			
	Если ТипЗнч(ДокументСчетФактура.ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") 
		И ИспользуетсяПостановлениеНДС1137 Тогда
		
		ДокументСчетФактура.СчетФактураНеВыставляется = Истина;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ДокументСчетФактура.КППКонтрагента) Тогда
		ДокументСчетФактура.КППКонтрагента = УчетНДСБП.ПолучитьКПППодразделенияКонтрагента(ДокументСчетФактура.ДокументОснование, "Грузополучатель");
	КонецЕсли;
	
	ПараметрСводныйКорректировочный = Ложь;
	
	Если ДокументСчетФактура.СводныйКорректировочный <> ПараметрСводныйКорректировочный Тогда
		СводныйКорректировочный = ПараметрСводныйКорректировочный;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодВидаОперации(ДокументСчетФактура, КодВидаОперацииОснования = Неопределено)

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Дата",						ДокументСчетФактура.Дата);
	СтруктураПараметров.Вставить("ВидСчетаФактуры",				ДокументСчетФактура.ВидСчетаФактуры);
	СтруктураПараметров.Вставить("Исправление",					ДокументСчетФактура.Исправление);
	СтруктураПараметров.Вставить("Контрагент",					ДокументСчетФактура.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента",			ДокументСчетФактура.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Продавец",					ДокументСчетФактура.Продавец);
	СтруктураПараметров.Вставить("КодВидаОперации",				ДокументСчетФактура.КодВидаОперации);
	СтруктураПараметров.Вставить("ДокументыОснования",			ДокументСчетФактура.ДокументыОснования.Выгрузить(,"ДокументОснование"));
	СтруктураПараметров.Вставить("ДокументОснование",			ДокументСчетФактура.ДокументОснование);

	Возврат Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(СтруктураПараметров, КодВидаОперацииОснования);

КонецФункции

&Сервер
Функция СоздатьДокументСФНаРеализацию(doc_owner_uuid, force, post) экспорт
	
	ДокОснование = РаботаСоСсылками.НайтиСсылкуПоУИД(doc_owner_uuid);
	Если ДокОснование = неопределено тогда
		Возврат Новый Массив; //Возвращаем пустой массив
	КонецЕсли;	
		
	МассивДокументов = Новый Массив;
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(ДокОснование);

		
		//Если указан force тогда создаем сф в любом случае
		
		Если force тогда
			
			//---------------------- Создание СФ ---------------------------- //
			ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			ДокСФ.Организация = ДокОснование.Организация;
			ДокСФ.Дата = НачалоДня(ДокОснование.Дата);
			ДокСФ.Номер = ДокОснование.Номер;
			ДокСФ.ДокументОснование = ДокОснование.Ссылка;
			ЗаполнитьПоДокументуОснованию(ДокСФ, ДокОснование);
			
			
			Если НЕ post тогда
				Попытка
					ДокСФ.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					
				КонецПопытки;	
			Иначе
				Попытка
					ДокСФ.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокСФ.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;	
			КонецЕсли;
			
			МассивДокументов.Добавить(ДокСФ);
			
			//---------------------- Конец Создание СФ ---------------------------- //
			
		Иначе // force = false
			
			ТаблицаСвязанныхДокументов = СвязанныеДокументы.ПолучитьСписокСвязанныхДокументов(ДокОснование);
			МассивСФ = Новый Массив;
			
			Для каждого Док из ТаблицаСвязанныхДокументов цикл
				Если (ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный")) и (НЕ Док.Ссылка.ПометкаУдаления) тогда
					МассивСФ.Добавить(Док);
				КонецЕсли;	 
			КонецЦикла; 
			//Если в массиве нет не помеченных на удаление СФ - создаем, иначе отдаем массив не создавая документов
			Если МассивСФ.Количество() = 0 тогда
				
			//---------------------- Создание СФ ---------------------------- //
			ДокСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
			ДокСФ.Организация = ДокОснование.Организация;
			ДокСФ.Дата = НачалоДня(ДокОснование.Дата);
			ДокСФ.Номер = ДокОснование.Номер;
			ДокСФ.ДокументОснование = ДокОснование.Ссылка;
			ЗаполнитьПоДокументуОснованию(ДокСФ, ДокОснование);
				
				Если НЕ post тогда
					Попытка
						ДокСФ.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						
					КонецПопытки;	
				Иначе
					Попытка
						ДокСФ.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ДокСФ.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;	
				КонецЕсли;
				
				МассивДокументов.Добавить(ДокСФ);
				
				//---------------------- Конец Создание сф ---------------------------- //
				
			иначе
				МассивДокументов = МассивСФ;
			КонецЕсли;	 
		КонецЕсли;
		
		Возврат МассивДокументов;
КонецФункции	

