	Процедура СкопироватьТабличныеЧастиСчетаНаОплату(ДокументРеализации, ИменаТабличныхЧастей, СписокСчетовНаОплату, ОчищатьСтроки = Истина)
		Перем РеквизитыОснования, ВозвратнаяТараКРеализации;
		
		МассивИмен = СтрРазделить(ИменаТабличныхЧастей, ", ", Ложь);
		
		Если ОчищатьСтроки Тогда
			Для Каждого ИмяТабЧасти Из МассивИмен Цикл
				ДокументРеализации[ИмяТабЧасти].Очистить();
			КонецЦикла;
		КонецЕсли; 
		
		СкопироватьТовары         = (МассивИмен.Найти("Товары") <> Неопределено);
		СкопироватьУслуги         = (МассивИмен.Найти("Услуги") <> Неопределено);
		СкопироватьВозвратнуюТару = (МассивИмен.Найти("ВозвратнаяТара") <> Неопределено);
		
		ТаблицаРеализацийПоСчету = Документы.РеализацияТоваровУслуг.РеализацииПоСчетам(СписокСчетовНаОплату);
		РеквизитыСчетовНаОплату = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокСчетовНаОплату, "Контрагент, ДоговорКонтрагента");
		
		Для каждого СчетНаОплату Из СписокСчетовНаОплату Цикл
			
			РеквизитыСчета = РеквизитыСчетовНаОплату[СчетНаОплату];
			ЗаполнятьСчетПоСтроке = (ДокументРеализации.Контрагент = РеквизитыСчета.Контрагент) 
			И (РеквизитыСчета.ДоговорКонтрагента = ДокументРеализации.ДоговорКонтрагента ИЛИ НЕ ЗначениеЗаполнено(РеквизитыСчета.ДоговорКонтрагента));
			
			РеализацииПоСчетуНаОплату = ОбщегоНазначения.ВыгрузитьКолонку(
			ТаблицаРеализацийПоСчету.Скопировать(Новый Структура("СчетНаОплату", СчетНаОплату)),
			"Реализация");
			
			ЭтаРеализация = ДокументРеализации.Ссылка;
			
			ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
			ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(ДокументРеализации.Дата);
			ЗаполнятьПризнакПрослеживаемости = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
			И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДокументРеализации.Дата);
			
			// Товары и Услуги
			Если СкопироватьТовары Или СкопироватьУслуги Тогда
				
				ТоварыУслугиКРеализации = Документы.РеализацияТоваровУслуг.ТоварыУслугиКРеализацииПоСчету(
				СчетНаОплату, РеализацииПоСчетуНаОплату, ЗаполнятьПризнакПрослеживаемости);
				
				Для Каждого СтрокаОснования Из ТоварыУслугиКРеализации Цикл
					
					Если СтрокаОснования.ЭтоУслуга Тогда
						Если СкопироватьУслуги Тогда
							СтрокаУслуги = ДокументРеализации.Услуги.Добавить();
							
							Если ЗаполнятьСчетПоСтроке Тогда
								СтрокаУслуги.СчетНаОплатуПокупателю = СчетНаОплату;
							КонецЕсли; 
							
							ЗаполнитьЗначенияСвойств(СтрокаУслуги, СтрокаОснования);
						КонецЕсли;
					Иначе
						Если СкопироватьТовары Тогда
							СтрокаТовары = ДокументРеализации.Товары.Добавить();
							
							Если ЗаполнятьСчетПоСтроке Тогда
								СтрокаТовары.СчетНаОплатуПокупателю = СчетНаОплату;
							КонецЕсли; 
							
							ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаОснования);
							Если ПокупательНалоговыйАгентПоНДС = Истина
								И ВедетсяУчетНДСПоФЗ335 Тогда 
								СтрокаТовары.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДокументРеализации.Дата);
								СтрокаТовары.СуммаНДС = 0;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетНаОплату, "ДокументБезНДС, СуммаВключаетНДС");
				ДокументБезНДС = РеквизитыОснования.ДокументБезНДС;
				
			КонецЕсли;
			
			// Пересчет сумм в табличной части Товары
			Если СкопироватьТовары И РеквизитыОснования.СуммаВключаетНДС <> ДокументРеализации.СуммаВключаетНДС Тогда
				Для Каждого СтрокаТЧ Из ДокументРеализации.Товары Цикл
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(ДокументРеализации.СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
					СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
					Если НЕ (ПокупательНалоговыйАгентПоНДС = Истина
						И ВедетсяУчетНДСПоФЗ335) Тогда 
						ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументРеализации.СуммаВключаетНДС);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Пересчет сумм в табличной части Услуги
			Если СкопироватьУслуги И  РеквизитыОснования.СуммаВключаетНДС <> ДокументРеализации.СуммаВключаетНДС Тогда
				Для Каждого СтрокаТЧ Из ДокументРеализации.Услуги Цикл
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(ДокументРеализации.СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
					СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, СтрокаТЧ.Сумма, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
					ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ДокументРеализации.СуммаВключаетНДС);
				КонецЦикла;
			КонецЕсли;
			
			// Возвратная тара
			Если ПолучитьФункциональнуюОпцию("ИспользоватьВозвратнуюТару") И СкопироватьВозвратнуюТару Тогда
				Если ВозвратнаяТараКРеализации = Неопределено Тогда
					ВозвратнаяТараКРеализации = Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату);
				ИНаче
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					Документы.РеализацияТоваровУслуг.ВозвратнаяТараКРеализацииПоСчету(СчетНаОплату, РеализацииПоСчетуНаОплату), 
					ВозвратнаяТараКРеализации);
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла; 
		
		Если ВозвратнаяТараКРеализации <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВозвратнаяТараКРеализации, ДокументРеализации.ВозвратнаяТара);
		КонецЕсли; 
	КонецПроцедуры
	
	Процедура ЗаполнитьПоПоступлению(ДокументРеализации, ИмяТабЧасти, Режим, Поступление, ИмяТабЧастиИсточника = Неопределено, ЗаполнятьСчетаУчета = Истина)
		
		Если НЕ ЗначениеЗаполнено(Поступление) Тогда
			Возврат;
		КонецЕсли;
		
		ПлательщикНДС	= УчетнаяПолитика.ПлательщикНДС(ДокументРеализации.Организация, ДокументРеализации.Дата);
		// При реализации в страны ЕАЭС заполняем и отражаем колонку "Код ТН ВЭД" для целей счета-фактуры и книги продаж.
		РеализацияВЕАЭС              = Справочники.Контрагенты.КонтрагентРезидентТаможенногоСоюза(ДокументРеализации.Контрагент);
		ВедетсяУчетНДСПоФЗ150        = УчетНДС.ВедетсяУчетНДСПоФЗ150(ДокументРеализации.Дата);
		ЗаполнятьТНВЭД = РеализацияВЕАЭС И ВедетсяУчетНДСПоФЗ150;
		ВедетсяУчетПрослеживаемыхТоваров = ПолучитьФункциональнуюОпцию("ВестиУчетПрослеживаемыхТоваров")
		И ПрослеживаемостьБРУ.ВедетсяУчетПрослеживаемыхТоваров(ДокументРеализации.Дата);
		
		ПокупательНалоговыйАгентПоНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации.ДоговорКонтрагента, "УчетАгентскогоНДСПокупателем");
		ВедетсяУчетНДСПоФЗ335 = УчетНДС.ВедетсяУчетНДСПоФЗ335(ДокументРеализации.Дата);
		
		ТабличнаяЧасть = ДокументРеализации[ИмяТабЧасти];
		СтрокиДляЗаполненияСчетов = Новый Массив;
		
		Если ТабличнаяЧасть.Количество() > 0 И Режим = "Заполнить" Тогда
			ТабличнаяЧасть.Очистить();
		КонецЕсли;
		
		ТабЧастьИсточник = ?(ИмяТабЧастиИсточника = Неопределено, ИмяТабЧасти, ИмяТабЧастиИсточника);
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Поступление", Поступление);
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.НомерСтроки,
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Количество" +?(ТабЧастьИсточник = "Товары",",
		|	ПоступлениеТоваровУслугТовары.КоличествоМест,
		|	ПоступлениеТоваровУслугТовары.ЕдиницаИзмерения,
		|	ПоступлениеТоваровУслугТовары.Коэффициент,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
		|	ПоступлениеТоваровУслугТовары.НомерГТД,
		|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения", "") + "
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг."+ТабЧастьИсточник + " КАК ПоступлениеТоваровУслугТовары
		|
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Поступление
		|УПОРЯДОЧИТЬ ПО
		|	ПоступлениеТоваровУслугТовары.НомерСтроки";
		
		ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
		
		ДанныеОбъекта = Новый Структура(
		"Дата, Организация, ДеятельностьНаПатенте, Склад,
		|ЭтоКомиссия, Реализация, ТипЦен, СуммаВключаетНДС, ДокументБезНДС");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ДокументРеализации);
		ДанныеОбъекта.Реализация	= Истина;
		ДанныеОбъекта.ЭтоКомиссия	= (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации.ДоговорКонтрагента, "ВидДоговора")
		= Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
		Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
			ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
		КонецЕсли;
		
		СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта, Ложь);
		
		Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
			
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТоваров);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТоваров.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Товары" Тогда
				
				Если НЕ ПлательщикНДС Тогда
					Если НЕ ЗаполнятьТНВЭД Тогда
						СтрокаТабличнойЧасти.СтавкаНДС = СведенияОНоменклатуре.СтавкаНДС;
					Иначе
						СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
					КонецЕсли;
				ИначеЕсли ПокупательНалоговыйАгентПоНДС = Истина
					И ВедетсяУчетНДСПоФЗ335 Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСИсчисляетсяНалоговымАгентом(ДокументРеализации.Дата);
					СтрокаТабличнойЧасти.СуммаНДС = 0;
				КонецЕсли;
				
				Если ЗаполнятьТНВЭД Тогда 
					СтрокаТабличнойЧасти.КодТНВЭД = СведенияОНоменклатуре.КодТНВЭД;
				КонецЕсли;
				
				Если ВедетсяУчетПрослеживаемыхТоваров Тогда
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = СведенияОНоменклатуре.ПрослеживаемыйТовар;
				Иначе
					СтрокаТабличнойЧасти.ПрослеживаемыйТовар = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяТабЧасти = "Товары" И ТабЧастьИсточник = "Оборудование" Тогда
				
				СтрокаТабличнойЧасти.ЕдиницаИзмерения	= СведенияОНоменклатуре.ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент		= СведенияОНоменклатуре.Коэффициент;
				СтрокаТабличнойЧасти.СтавкаНДС			= СведенияОНоменклатуре.СтавкаНДС;
				
			КонецЕсли;
			
			Если ИмяТабЧасти = "Услуги" Тогда 
				
				СтрокаТабличнойЧасти.Содержание = СведенияОНоменклатуре.НаименованиеПолное;
				СтрокаТабличнойЧасти.СтавкаНДС  = СведенияОНоменклатуре.СтавкаНДС;
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти.Цена = СведенияОНоменклатуре.Цена;
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ?(ИмяТабЧасти = "Услуги", 1, 0));
			
			Если ИмяТабЧасти <> "ВозвратнаяТара" 
				И НЕ (ПокупательНалоговыйАгентПоНДС = Истина
				И ВедетсяУчетНДСПоФЗ335)Тогда
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументРеализации.СуммаВключаетНДС);
				
			КонецЕсли;
			
			СтрокиДляЗаполненияСчетов.Добавить(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
		Если ЗаполнятьСчетаУчета Тогда
			
			СчетаУчетаВДокументах.ЗаполнитьСтроки(
			СтрокиДляЗаполненияСчетов, ИмяТабЧасти, ДокументРеализации, Документы.РеализацияТоваровУслуг);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоДокументуОснованию(ДокументРеализации, МассивОснований)
		
		Основание = МассивОснований[0];
		
		// Поддерживается множественный ввод на основании только для счета, для остальных документов - берется первый из списка оснований
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			// Заполним реквизиты шапки по документу основанию.
			ДокументРеализации.ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(МассивОснований);
			
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"АдресДоставки, СтруктурнаяЕдиница, СпособДоставки, СпособДоставки.Контрагент");
			
			ДокументРеализации.СпособДоставки = ДанныеОснования.СпособДоставки;
			ДокументРеализации.АдресДоставки  = ДанныеОснования.АдресДоставки;
			ДокументРеализации.Перевозчик     = ДанныеОснования.СпособДоставкиКонтрагент;
			
			ДокументРеализации.СчетНаОплатуПокупателю = Основание;
			
			// Заполним реквизиты из стандартного набора по документу основанию.
			ЗаполнениеДокументов.ЗаполнитьПоОснованию(ДокументРеализации, Основание, Истина);
			
			ПараметрыОбъекта = Новый Структура("ВидОперации, ДеятельностьНаПатенте");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ДокументРеализации);
			
			МассивВидовДоговоров   = ПолучитьМассивВидовДоговоров(ДокументРеализации.ВидОперации, ДокументРеализации.ДеятельностьНаПатенте);
			ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации.ДоговорКонтрагента, "ВидДоговора");
			
			Если МассивВидовДоговоров.Найти(ВидДоговораКонтрагента) = Неопределено Тогда
				ДокументРеализации.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
			
			// заполним банковский счет
			Если ЗначениеЗаполнено(ДанныеОснования.СтруктурнаяЕдиница)
				И ТипЗнч(ДанныеОснования.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументРеализации.БанковскийСчетОрганизации = ДанныеОснования.СтруктурнаяЕдиница;
			КонецЕсли;
			
			ИменаТабличныхЧастей = "Товары, Услуги, ВозвратнаяТара";
			СкопироватьТабличныеЧастиСчетаНаОплату(ДокументРеализации, ИменаТабличныхЧастей, МассивОснований);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			// Заполним реквизиты из стандартного набора по документу основанию.
			ДанныеОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, 
			"ВалютаДокумента, ПодразделениеОрганизации, ВидОперации, Организация, Склад");
			
			Если ДанныеОснования.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
				ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
			Иначе
				ДокументРеализации.ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основание));
			КонецЕсли;
			
			ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОснования.Склад, "ТипСклада");
			Если ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				ДокументРеализации.Склад = ДанныеОснования.Склад;
			КонецЕсли;
			
			ДокументРеализации.Организация              = ДанныеОснования.Организация;
			ДокументРеализации.ВалютаДокумента          = ДанныеОснования.ВалютаДокумента;
			ДокументРеализации.ПодразделениеОрганизации = ДанныеОснования.ПодразделениеОрганизации;
			ЗаполнениеДокументов.Заполнить(ДокументРеализации);
			
			// Флаги включения налогов.
			Если ЗначениеЗаполнено(ДокументРеализации.ТипЦен) Тогда
				ДокументРеализации.СуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации.ТипЦен, "ЦенаВключаетНДС");
			Иначе
				ДокументРеализации.СуммаВключаетНДС = Истина;
			КонецЕсли;
			
			// Счета учета будут заполнены позднее, при вызове ЗаполнениеДокументов.Заполнить()
			ЗаполнитьПоПоступлению("Товары", "Заполнить", Основание, "Товары", Ложь);
			ЗаполнитьПоПоступлению("ВозвратнаяТара", "Заполнить", Основание, "ВозвратнаяТара", Ложь);
			Если ДокументРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
				ЗаполнитьПоПоступлению("Товары", "Добавить", Основание, "Оборудование", Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ПолучитьМассивВидовДоговоров(ВидОперации, ДеятельностьНаПатенте = Ложь)
		СписокВидовДоговоров = Новый Массив;
		
		ПростыеВидыОпераций = Новый Массив;
		ПростыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Товары);
		ПростыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
		ПростыеВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		
		Если ПростыеВидыОпераций.Найти(ВидОперации) = Неопределено 
			И НЕ ДеятельностьНаПатенте 
			И ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров") Тогда
			
			СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		КонецЕсли;
		Возврат СписокВидовДоговоров;
	КонецФункции
	
	Функция ОпределитьВидОперацииПоДокументуОснованию(СписокОснований)
		Если СписокОснований.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("СписокОснований", СписокОснований);
		
		Если ТипЗнч(СписокОснований[0]) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК ЕстьТовары,
			|	0 КАК ЕстьУслуги,
			|	0 КАК ЕстьВозвратнаяТара,
			|	0 КАК ЕстьОборудование
			|ПОМЕСТИТЬ ВТ_Таблицы
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю.Товары КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)
			|	И НЕ ЕСТЬNULL(ДокОснование.Номенклатура.Услуга, ИСТИНА)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	0,
			|	1,
			|	0,
			|	0
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю.Товары КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)
			|	И ЕСТЬNULL(ДокОснование.Номенклатура.Услуга, ИСТИНА)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	0,
			|	0,
			|	1,
			|	0
			|ИЗ
			|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)";
			
		ИначеЕсли ТипЗнч(СписокОснований[0]) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	0 КАК ЕстьТовары,
			|	0 КАК ЕстьУслуги,
			|	0 КАК ЕстьВозвратнаяТара,
			|	1 КАК ЕстьОборудование
			|ПОМЕСТИТЬ ВТ_Таблицы
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Оборудование КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК ЕстьТовары,
			|	0 КАК ЕстьУслуги,
			|	0 КАК ЕстьВозвратнаяТара,
			|	0 КАК ЕстьОборудование
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	0 КАК ЕстьТовары,
			|	0 КАК ЕстьУслуги,
			|	1 КАК ЕстьВозвратнаяТара,
			|	0 КАК ЕстьОборудование
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&СписокОснований)
			|";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + 
		"ВЫБРАТЬ
		|	СУММА(ВТ_Таблица.ЕстьТовары) КАК ЕстьТовары,
		|	СУММА(ВТ_Таблица.ЕстьУслуги) КАК ЕстьУслуги,
		|	СУММА(ВТ_Таблица.ЕстьВозвратнаяТара) КАК ЕстьВозвратнаяТара,
		|	СУММА(ВТ_Таблица.ЕстьОборудование) КАК ЕстьОборудование
		|ИЗ
		|	ВТ_Таблицы КАК ВТ_Таблица";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЕстьТовары 	= Ложь;
		ЕстьУслуги	= Ложь;
		ЕстьВозвратнаяТара	= Ложь;
		ЕстьОборудование 	= Ложь;
		Если Выборка.Следующий() Тогда
			ЕстьТовары 	= ЗначениеЗаполнено(Выборка.ЕстьТовары) И Выборка.ЕстьТовары > 0;
			ЕстьУслуги	= ЗначениеЗаполнено(Выборка.ЕстьУслуги) И Выборка.ЕстьУслуги > 0;
			ЕстьВозвратнаяТара	= ЗначениеЗаполнено(Выборка.ЕстьВозвратнаяТара) И Выборка.ЕстьВозвратнаяТара > 0;
			ЕстьОборудование	= ЗначениеЗаполнено(Выборка.ЕстьОборудование) И Выборка.ЕстьОборудование > 0;
		КонецЕсли;
		
		Результат = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		
		ОсуществляетсяРеализацияТоваровУслугКомитентов			 = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
		ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров	 = ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
		ВедетсяОтгрузкаБезПереходаПраваСобственности   			 = ПолучитьФункциональнуюОпцию("ВедетсяОтгрузкаБезПереходаПраваСобственности");
		
		Если ЕстьТовары И ЕстьУслуги И ВедетсяОтгрузкаБезПереходаПраваСобственности Тогда
			// Предложим пользователю выбрать необходимую форму.
			Результат = Неопределено;
			
		ИначеЕсли (ЕстьТовары И ЕстьУслуги)
			ИЛИ ЕстьОборудование
			ИЛИ ЕстьВозвратнаяТара Тогда
			// Одновременная реализация товаров и услуг,
			// а также реализация оборудования и использование возвратной тары выполняется через основную форму.
			
		ИначеЕсли ЕстьТовары И (ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров ИЛИ ВедетсяОтгрузкаБезПереходаПраваСобственности) Тогда
			// Предложим пользователю выбрать необходимую форму.
			Результат = Неопределено;
			
		ИначеЕсли ЕстьТовары Тогда
			Результат = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
			
		ИначеЕсли ЕстьУслуги Тогда
			// Если осуществляется реализация товаров и услуг комитентов, то могут быть агентские услуги, которые 
			// указываются в основной форме, иначе отображаем форму только для собственных услуг.
			Если НЕ ОсуществляетсяРеализацияТоваровУслугКомитентов Тогда
				
				Результат = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
				
			КонецЕсли; 
			
		КонецЕсли;
		
		// Все остальные случаи - через основную форму.
		Возврат Результат;
		
	КонецФункции


&Сервер
Функция СоздатьДокументРеализации(doc_owner_uuid, doc_wh_uuid, doc_subtype, force, post) экспорт
	
	ДокОснование = РаботаСоСсылками.НайтиСсылкуПоУИД(doc_owner_uuid);
	Если ДокОснование = неопределено тогда
		Возврат Новый Массив; //Возвращаем пустой массив
	КонецЕсли;	
	
	ОсновнойСклад = РаботаСоСсылками.НайтиСсылкуПоУИД(doc_wh_uuid);
	Если ОсновнойСклад = неопределено тогда
		Возврат Новый Массив; //Возвращаем пустой массив
	КонецЕсли;	

	
	МассивДокументов = Новый Массив;
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(ДокОснование);

		
		//Если указан force тогда создаем реализацию в любом случае
		
		Если force тогда
			
			//---------------------- Создание реализации ---------------------------- //
			ДокРеализации = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			ДокРеализации.Организация = ДокОснование.Организация;
			ДокРеализации.Дата = НачалоДня(ДокОснование.Дата);
			ДокРеализации.СчетНаОплатуПокупателю = ДокОснование.Ссылка;
			Попытка ДокРеализации.Продукт = ДокОснование.Продукт;
			Исключение	
			КонецПопытки;	
			ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
			ЗаполнитьПоДокументуОснованию(ДокРеализации, МассивОснований);
			ЗаполнениеДокументов.Заполнить(ДокРеализации, неопределено, истина); //заполним счета учета
			Если ДокРеализации.Склад = Справочники.Склады.ПустаяСсылка() тогда   //заполним склад
				ДокРеализации.Склад = ОсновнойСклад.Ссылка;
			КонецЕсли;
			ДокРеализации.ПодразделениеОрганизации = ДокОснование.ПодразделениеОрганизации;
			
			
			// ----------------------- Пытаемся определить вид реализации, если ВидОперации = неопределено, устанавливаем исходя из входных параметров ------------- //
			
			Если ДокРеализации.ВидОперации = неопределено тогда
				Если 		doc_subtype = "goods" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
				ИначеЕсли 	doc_subtype = "services" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
				ИначеЕсли 	doc_subtype = "comission" тогда 	ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
				ИначеЕсли 	doc_subtype = "shipment" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
				ИначеЕсли 	doc_subtype = "equipment" тогда 	ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
				Иначе                                           ДокРеализации.ВидОперации = неопределено;
				КонецЕсли;	
			КонецЕсли;		
			
			Если НЕ post тогда
				Попытка
					ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
				Исключение
					
				КонецПопытки;	
			Иначе
				Попытка
					ДокРеализации.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
				КонецПопытки;	
			КонецЕсли;
			
			МассивДокументов.Добавить(ДокРеализации);
			
			//---------------------- Конец Создание реализации ---------------------------- //
			
		Иначе // force = false
			
			ТаблицаСвязанныхДокументов = СвязанныеДокументы.ПолучитьСписокСвязанныхДокументов(ДокОснование);
			МассивРеализаций = Новый Массив;
			
			Для каждого Док из ТаблицаСвязанныхДокументов цикл
				Если (ТипЗнч(Док.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг")) и (НЕ Док.Ссылка.ПометкаУдаления) тогда
					МассивРеализаций.Добавить(Док);
				КонецЕсли;	 
			КонецЦикла; 
			//Если в массиве нет не помеченных на удаление реализаций - создаем, иначе отдаем массив не создавая документов
			Если МассивРеализаций.Количество() = 0 тогда
				
				//---------------------- Создание реализации ---------------------------- //
				ДокРеализации = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
				ДокРеализации.Организация = ДокОснование.Организация;
				ДокРеализации.Дата = НачалоДня(ДокОснование.Дата);
				ДокРеализации.СчетНаОплатуПокупателю = ДокОснование.Ссылка;
				Попытка ДокРеализации.Продукт = ДокОснование.Продукт;
				Исключение	
				КонецПопытки;	
				ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
				ЗаполнитьПоДокументуОснованию(ДокРеализации, МассивОснований);
				ЗаполнениеДокументов.Заполнить(ДокРеализации, неопределено, истина); //заполним счета учета
				Если ДокРеализации.Склад = Справочники.Склады.ПустаяСсылка() тогда   //заполним склад
					ДокРеализации.Склад = ОсновнойСклад.Ссылка;
				КонецЕсли;
				ДокРеализации.ПодразделениеОрганизации = ДокОснование.ПодразделениеОрганизации;
				
				
				// ----------------------- Пытаемся определить вид реализации, если ВидОперации = неопределено, устанавливаем исходя из входных параметров ------------- //
				
				Если ДокРеализации.ВидОперации = неопределено тогда
					Если 		doc_subtype = "goods" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары;
					ИначеЕсли 	doc_subtype = "services" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
					ИначеЕсли 	doc_subtype = "comission" тогда 	ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
					ИначеЕсли 	doc_subtype = "shipment" тогда 		ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
					ИначеЕсли 	doc_subtype = "equipment" тогда 	ДокРеализации.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
					Иначе                                           ДокРеализации.ВидОперации = неопределено;
					КонецЕсли;	
				КонецЕсли;		
				
				Если НЕ post тогда
					Попытка
						ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
					Исключение
						
					КонецПопытки;	
				Иначе
					Попытка
						ДокРеализации.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						ДокРеализации.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;	
				КонецЕсли;
				
				МассивДокументов.Добавить(ДокРеализации);
				
				//---------------------- Конец Создание реализации ---------------------------- //
				
			иначе
				МассивДокументов = МассивРеализаций;
			КонецЕсли;	 
		КонецЕсли;
		
		Возврат МассивДокументов;
КонецФункции	