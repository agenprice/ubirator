
Функция ПолучитьПечатнуюФормуДокументаGET(Запрос)
	
	#Область ОбработкаHTTPЗапроса
	
	#Область ИнициаллизацияПеременных
	
	firm_uuid 		= "";
	doc_type	 	= "";
	doc_date	 	= "";
	doc_number		= "";
	doc_uuid		= "";
	format			= "json";
	prn_form		= "";
	
	Организация 			= Справочники.Организации.ПустаяСсылка();
	СчетПокупателя			= Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
	РеализацияТоваровУслуг	= Документы.РеализацияТоваровУслуг.ПустаяСсылка();	
	СчетФактураВыданный		= Документы.СчетФактураВыданный.ПустаяСсылка();
	ДатаДокумента			= Дата(1,1,1);
	НомерДокумента 			= "";
	
	#КонецОбласти
	
	
	//Переберем параметры
	
	Для Каждого тЭлем Из Запрос.ПараметрыЗапроса Цикл
		Если НРЕГ(СокрЛП(тЭлем.Ключ)) = "firm_uuid" тогда
			firm_uuid = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "doc_type" тогда
			doc_type = СокрЛП(тЭлем.Значение);	
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "doc_date" тогда
			doc_date = НРЕГ(СокрЛП(тЭлем.Значение));
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "doc_number" тогда
			doc_number = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "doc_uuid" тогда
			doc_uuid = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "format" тогда
			format = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "prn_form" тогда
			prn_form = СокрЛП(тЭлем.Значение);
		Иначе
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		
		Если НРЕГ(СокрЛП(doc_uuid)) <> "" тогда //Передан uuid документа принимаем его тип иначе ищем документ по параметрам firm_uuid, doc_date, doc_number
			
			//--- Подбираем документ "счет на оплату покупателя" ---
			
			Если НРЕГ(СокрЛП(doc_type)) = "bill" тогда 
				НовыйGUID = Новый УникальныйИдентификатор(doc_uuid);
				СчетПокупателя = Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(НовыйGUID);
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументСчетНаОплату(Организация, СчетПокупателя, ДатаДокумента, НомерДокумента, prn_form);
				
				//--- Подбираем документ "реализация товаров и услуг" ---
				
			ИначеЕсли НРЕГ(СокрЛП(doc_type)) = "sales" тогда 
				НовыйGUID = Новый УникальныйИдентификатор(doc_uuid);
				РеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(НовыйGUID);
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументРеализация(Организация, РеализацияТоваровУслуг, ДатаДокумента, НомерДокумента, prn_form);
				
				//--- Подбираем документ "счет фактура выданный" ---
				
			ИначеЕсли НРЕГ(СокрЛП(doc_type)) = "invoice" тогда 
				НовыйGUID = Новый УникальныйИдентификатор(doc_uuid);
				СчетФактура = Документы.СчетФактураВыданный.ПолучитьСсылку(НовыйGUID);
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументСчетФактураВыданный(Организация, СчетФактура, ДатаДокумента, НомерДокумента, prn_form);
				
			Иначе	
				
			КонецЕсли;
			
			
		Иначе
			
			Если НРЕГ(СокрЛП(firm_uuid)) <> "" тогда //Передан uuid организации
				НовыйGUID = Новый УникальныйИдентификатор(firm_uuid);
				Организация = Справочники.Организации.ПолучитьСсылку(НовыйGUID);
			КонецЕсли;
			
			Если НРЕГ(СокрЛП(doc_date)) <> "" тогда //Передана дата документа
				ДатаДокумента = Дата(СокрЛП(doc_date));
			КонецЕсли;
			
			Если НРЕГ(СокрЛП(doc_number)) <> "" тогда //Передан номер документа
				НомерДокумента = СокрЛП(doc_number);
			КонецЕсли;
			
			Если НРЕГ(СокрЛП(doc_type)) = "bill" тогда //Формируем счет на оплату клиенту
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументСчетНаОплату(Организация, неопределено, ДатаДокумента, НомерДокумента, prn_form);
			КонецЕсли;
			
			Если НРЕГ(СокрЛП(doc_type)) = "sales" тогда //Формируем Реализацию
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументРеализация(Организация, неопределено, ДатаДокумента, НомерДокумента, prn_form);
			КонецЕсли;
			
			Если НРЕГ(СокрЛП(doc_type)) = "invoice" тогда //Формируем Счет фактуру выданную
				ТабличныйДокумент = РаботаСДокументами.ПолучитьТабличныйДокументСчетФактураВыданный(Организация, неопределено, ДатаДокумента, НомерДокумента, prn_form);
			КонецЕсли;
			
			
		КонецЕсли;
		
	Исключение
		//
	КонецПопытки;	
	
	#КонецОбласти
	
	#Область ОтправкаОтветаКлиенту
	
	Ответ = Новый HTTPСервисОтвет(200);	
	СтруктураОшибки = Новый Структура("error,	text",	false,	"");
	
	Попытка
		Если Не format = "json" тогда
			Если format = "html" тогда 
				//такой финт ушами, потому что 1С не умеет заворачивать html в бинарный поток, потому сохраняем 
				//табличныйдокумент в файл, а потом читаем его содержимое и засовываем в HTTP ответ
				ИмяТемпФайла = ПолучитьИмяВременногоФайла("html");
				ТабличныйДокумент.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.HTML5);
				ТекстHТМЛ = Новый ТекстовыйДокумент;
				ТекстHТМЛ.Прочитать(ИмяТемпФайла);
				ТекстHТМЛ = ТекстHТМЛ.ПолучитьТекст();
				Ответ.УстановитьТелоИзСтроки(ТекстHТМЛ);
				Ответ.Заголовки["Content-Type"] = "text/html; charset=utf-8"; //сообщаем что это html
			Иначе	
				// Запишем табличный документ в поток в памяти.
				Поток = Новый ПотокВПамяти;
				ТабличныйДокумент.Записать(Поток, ТипФайлаТабличногоДокумента[format]);
				// Получим двоичные данные для отправки клиенту
				ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
				// Сформируем имя файла, с которым печатная форма будет загружена у клиента.
				ИмяФайла = НРЕГ(СокрЛП(doc_type)) + "."+format;
				// Кодируем строку URL, чтобы избежать проблем с русскими буквами и другими символами (например, пробел).
				ИмяФайла = КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL);
				// Установим заголовки.
				//HTTPОтвет.Заголовки.Вставить("Content-Type", "application/pdf"); // Чтобы браузер знал, что это PDF
				Ответ.Заголовки.Вставить("Content-Type", "application/"+format); // Чтобы браузер знал, что это за расширение
				Ответ.Заголовки.Вставить("Content-Disposition", "attachment; filename=""" + ИмяФайла + """");
				// Телом ответа являются двоичные данные печатной формы.
				Ответ.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанные);
			КонецЕсли;
		Иначе //формируем json
			Если format = "json" тогда
				//Вывод в формате JSON
				тЗаписьJSON = Новый ЗаписьJSON;
				тЗаписьJSON.ПроверятьСтруктуру = Ложь;
				тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
				тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
				СериализаторXDTO.ЗаписатьJSON(тЗаписьJSON,ТабличныйДокумент,НазначениеТипаXML.Явное);
				СтрокаJSON = тЗаписьJSON.Закрыть();
				Ответ.УстановитьТелоИзСтроки(СтрокаJSON,КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
			Иначе
				//
			КонецЕсли;
		КонецЕсли;
	Исключение
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= ОписаниеОшибки();
		тЗаписьJSON = Новый ЗаписьJSON;
		тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
		тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
		ЗаписатьJSON(тЗаписьJSON,СтруктураОшибки);
		ТекстОтвета = тЗаписьJSON.Закрыть();
		
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	КонецПопытки;	
	
	Возврат Ответ;
	#КонецОбласти 
КонецФункции	

Функция ПолучитьВерсиюРасширенияget(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);	
	СтруктураОшибки = Новый Структура("error,	text",		false,	"");
	СтруктураОтвета = Новый Структура("error,	result",	false,	"");
	
	Попытка
		ВерсияРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", "Интеграция"))[0].Версия;
		СтруктураОтвета.error 		= Ложь;
		СтруктураОтвета.result		= ВерсияРасширения;
		СтруктураВозврата 			= СтруктураОтвета;
	Исключение
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= ОписаниеОшибки();
		СтруктураВозврата 			= СтруктураОшибки;
		
	КонецПопытки;
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
	тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
	ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
	ТекстОтвета = тЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокСвязанныхДокументов(Запрос)
	
	doc_uuid		= "";
	format			= "json";
	
	//Переберем параметры
	
	Для Каждого тЭлем Из Запрос.ПараметрыЗапроса Цикл
		Если НРЕГ(СокрЛП(тЭлем.Ключ)) = "doc_uuid" тогда
			doc_uuid = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "format" тогда
			format = СокрЛП(тЭлем.Значение);
		Иначе
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ТаблицаСвязанныхДокументов = СвязанныеДокументы.ПолучитьСписокСвязанныхДокументов(РаботаСоСсылками.НайтиСсылкуПоУИД(doc_uuid));
	Исключение
		ТаблицаСвязанныхДокументов = Неопределено;
	КонецПопытки;	
	
	Ответ = Новый HTTPСервисОтвет(200);	
	СтруктураОшибки = Новый Структура("error,	text",		false,	"");
	СтруктураОтвета = Новый Структура("error,	result",	false,	"");
	МассивСвязанныхДокументов = Новый Массив;
	
	Попытка
		
		Для Каждого СвязанныйДокумент из ТаблицаСвязанныхДокументов цикл
			СтруктураСвязанныйДокумент = Новый Структура();
			СтруктураСвязанныйДокумент.Вставить("doc_uuid", Строка(СвязанныйДокумент.Ссылка.УникальныйИдентификатор()));
			СтруктураСвязанныйДокумент.Вставить("doc_name", Строка(СвязанныйДокумент.Ссылка));
			СтруктураСвязанныйДокумент.Вставить("doc_type", Строка(ТипЗнч(СвязанныйДокумент.Ссылка)));
			СтруктураСвязанныйДокумент.Вставить("doc_date", СвязанныйДокумент.Ссылка.Дата);
			СтруктураСвязанныйДокумент.Вставить("doc_number", Строка(СвязанныйДокумент.Ссылка.Номер));
			СтруктураСвязанныйДокумент.Вставить("doc_deletionmark", СвязанныйДокумент.Ссылка.ПометкаУдаления);
			СтруктураСвязанныйДокумент.Вставить("doc_posted", СвязанныйДокумент.Ссылка.Проведен);
			МассивСвязанныхДокументов.Добавить(СтруктураСвязанныйДокумент);
		КонецЦикла;	
		
		СтруктураОтвета.error 		= Ложь;
		СтруктураОтвета.result		= МассивСвязанныхДокументов;
		СтруктураВозврата 			= СтруктураОтвета;
	Исключение
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= ОписаниеОшибки();
		СтруктураВозврата 			= СтруктураОшибки;
		
	КонецПопытки;
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
	тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
	ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
	ТекстОтвета = тЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьОбъектПоСсылке(Запрос)
	
	obj_uuid		= "";
	format			= "json";
	
	
	//Переберем параметры
	
	Для Каждого тЭлем Из Запрос.ПараметрыЗапроса Цикл
		Если НРЕГ(СокрЛП(тЭлем.Ключ)) = "obj_uuid" тогда
			obj_uuid = СокрЛП(тЭлем.Значение);
		ИначеЕсли НРЕГ(СокрЛП(тЭлем.Ключ)) = "format" тогда
			format = СокрЛП(тЭлем.Значение);
		Иначе
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		
		Если НРЕГ(СокрЛП(obj_uuid)) <> "" тогда //Передан uuid объекта принимаем его ссылку 
			obj = РаботаСоСсылками.НайтиСсылкуПоУИД(obj_uuid);
		КонецЕсли;
		
	Исключение
		//
	КонецПопытки;	
	
	Ответ = Новый HTTPСервисОтвет(200);	
	СтруктураОшибки = Новый Структура("error,	text",		false,	"");
	СтруктураОтвета = Новый Структура("error,	result",	false,	"");
	
	Попытка
		
		СтруктураНайденнаяСсылка = Новый Структура();
		СтруктураНайденнаяСсылка.Вставить("obj_uuid", obj_uuid);
		СтруктураНайденнаяСсылка.Вставить("obj_name", Строка(obj));
		СтруктураНайденнаяСсылка.Вставить("obj_type", Строка(ТипЗнч(obj)));
		
		
		СтруктураОтвета.error 		= Ложь;
		СтруктураОтвета.result		= СтруктураНайденнаяСсылка;
		СтруктураВозврата 			= СтруктураОтвета;
	Исключение
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= ОписаниеОшибки();
		СтруктураВозврата 			= СтруктураОшибки;
		
	КонецПопытки;
	
	тЗаписьJSON = Новый ЗаписьJSON;
	тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
	тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
	ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
	ТекстОтвета = тЗаписьJSON.Закрыть();
	
	Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	
	Возврат Ответ;
КонецФункции

Функция СоздатьПодчиненныйДокумент(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	СтруктураОшибки = Новый Структура("error,	text",		false,	"");
	СтруктураОтвета = Новый Структура("error,	result",	false,	"");
	
	Попытка
		json = Запрос.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(json);		
		ЗапросСтруктура = ПрочитатьJSON(Чтение);
	Исключение
		//В качетстве входного параметра пришло черт знает что
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= ОписаниеОшибки();
		СтруктураВозврата 			= СтруктураОшибки;
		тЗаписьJSON = Новый ЗаписьJSON;
		тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
		тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
		ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
		ТекстОтвета = тЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	   	Возврат Ответ;
	КонецПопытки;	
		
	
	//Получаем данные от сервиса
	ДанныеВозврата = РаботаССервисом.ПолучитьДанныеJSON(ЗапросСтруктура);
	
	Если ДанныеВозврата = Неопределено тогда //Черт знает что вернулось
		СтруктураОшибки.error 		= Истина;
		СтруктураОшибки.text 		= "Сервер не вернул корректных данных (null)";
		СтруктураВозврата 			= СтруктураОшибки;
		тЗаписьJSON = Новый ЗаписьJSON;
		тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
		тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
		ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
		ТекстОтвета = тЗаписьJSON.Закрыть();
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
	   	Возврат Ответ;
	КонецЕсли;	
	
	//Если ничего не сломалось, определяем идент post запроса
	
	
	Если ЗапросСтруктура.ident = СокрЛП("create_linked_doc") или ЗапросСтруктура.ident = СокрЛП("create_all_linked_docs")  тогда //это запрос на создание подчиненного документа
		
		Если ДанныеВозврата.Количество() = 0 тогда // Если не создан подчиненный документ и массив реализаций пустой
			СтруктураОшибки.error 		= Истина;
			СтруктураОшибки.text 		= "Ошибка создания подчиненного документа";
			СтруктураВозврата 			= СтруктураОшибки;
			тЗаписьJSON = Новый ЗаписьJSON;
			тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
			тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
			тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
			ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
			ТекстОтвета = тЗаписьJSON.Закрыть();
			Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
		   	Возврат Ответ;
		КонецЕсли;	
			
		МассивСвязанныхДокументов = Новый Массив;	
		
			Для Каждого СвязанныйДокумент из ДанныеВозврата цикл
				СтруктураСвязанныйДокумент = Новый Структура();
				СтруктураСвязанныйДокумент.Вставить("doc_uuid", Строка(СвязанныйДокумент.Ссылка.УникальныйИдентификатор()));
				СтруктураСвязанныйДокумент.Вставить("doc_name", Строка(СвязанныйДокумент.Ссылка));
				СтруктураСвязанныйДокумент.Вставить("doc_type", Строка(ТипЗнч(СвязанныйДокумент.Ссылка)));
				СтруктураСвязанныйДокумент.Вставить("doc_date", СвязанныйДокумент.Ссылка.Дата);
				СтруктураСвязанныйДокумент.Вставить("doc_number", Строка(СвязанныйДокумент.Ссылка.Номер));
				СтруктураСвязанныйДокумент.Вставить("doc_deletionmark", СвязанныйДокумент.Ссылка.ПометкаУдаления);
				СтруктураСвязанныйДокумент.Вставить("doc_posted", СвязанныйДокумент.Ссылка.Проведен);
				МассивСвязанныхДокументов.Добавить(СтруктураСвязанныйДокумент);
			КонецЦикла;
			
		СтруктураОтвета.error 		= Ложь;
		СтруктураОтвета.result		= МассивСвязанныхДокументов;
		СтруктураВозврата 			= СтруктураОтвета;
		тЗаписьJSON = Новый ЗаписьJSON;
		тЗаписьJSON.ПроверятьСтруктуру = ИСТИНА;
		тПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
		тЗаписьJSON.УстановитьСтроку(тПараметрыЗаписиJSON);
		ЗаписатьJSON(тЗаписьJSON,СтруктураВозврата);
		ТекстОтвета = тЗаписьJSON.Закрыть();
		
		Ответ.УстановитьТелоИзСтроки(ТекстОтвета,КодировкаТекста.UTF8,ИспользованиеByteOrderMark.НеИспользовать);
		
		Возврат Ответ;
		
	КонецЕсли;
		
КонецФункции


